# -*- coding: utf-8 -*-
"""LDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Um53vh5EWg2GFN9nXlCOjCNRE5drnk_e

##Loading data set
"""

import pandas as pd

df=pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Smarket.csv')

print(df.head())



"""##LDA"""

X = df.iloc[:,1:8].values
y = df.iloc[:,8].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

lda = LDA(n_components=1)
X_train = lda.fit(X_train, y_train)
y_pred = lda.predict(X_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

cm = confusion_matrix(y_test, y_pred)
print(cm)
print('Accuracy ' + str(accuracy_score(y_test, y_pred)))

"""##LDA with different step size"""

import numpy as np
size=np.arange(0.1,1,step=0.1)

import matplotlib.pyplot as plt

def acc_score(size):
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=size, random_state=0)
  X_train = lda.fit(X_train, y_train)
  y_pred = lda.predict(X_test)
  return (accuracy_score(y_test, y_pred))

for i in size:
  plt.plot(i,acc_score(i),'o')
  plt.xlabel('Test size')
  plt.ylabel('Acurracy')

"""##LDA with transform and ensemble"""

X = df.iloc[:,1:8].values
y = df.iloc[:,8].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

lda = LDA(n_components=1)
X_train = lda.fit_transform(X_train, y_train)
X_test = lda.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

classifier = RandomForestClassifier(max_depth=2, random_state=0)

classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

cm = confusion_matrix(y_test, y_pred)
print(cm)
print('Accuracy ' + str(accuracy_score(y_test, y_pred)))

